input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
}

filter {
    if ([message] =~ /(HTTP\/[0-9\.]{20})/) { drop{} }
    grok {
      match => { "message" => "%{IP:client_ip} %{NOTSPACE:client_user} \[%{HTTPDATE:ts_timestamp}\] \"%{DATA:client_request_method} %{DATA:client_url} %{DATA:http_request_version}\" %{DATA:http_request_scheme} %{DATA:client_request_host} %{DATA:http_response_code} %{NUMBER:reply_length_bytes} \"%{GREEDYDATA:client_ua}\" %{DATA:cache_result} %{DATA:content_type} %{DATA:prox_name} %{NUMBER:ts_process_time} (%{URIPROTO}://(%{HOSTNAME})?(:%{NUMBER:http_request_port})?%{URIPATH}(%{URIPARAM:querystring})? (\"%{DATA:referer}\" \"%{DATA:forwardedfor}\")?)?" }
    }

        if [referer] == "-" { mutate { remove_field => ["referer"] } }
    if [forwardedfor] == "-" { mutate { remove_field => ["forwardedfor"] } }
    if ("" in [referer]) {
      grok { match => { "referer" => "%{WORD}://%{DATA:refererdomain}/" } }
    }
    fingerprint {
      source => "message"
      target => "[@metadata][fingerprint]"
      method => "MD5"
      key => "replayprotection"
    }
    date {
      match => [ "ts_timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
      target => "@timestamp"
    }
    geoip {
      source => "client_ip"
      target => "geoip"
      fields => [ "city_name", "continent_code", "country_code2", "country_name", "location" ]
    }
    useragent {
      source => "client_ua"
    }
    if [geoasn][as_org] {
      mutate { add_field => { "ISP" => "%{[geoasn][as_org]}" } }
    }
    mutate {
      rename => { "name" => "ua_name" }
      rename => { "[host][name]" => "[hostname]" }
      remove_field => [ "geoasn", "prox_name", "offset", "@version", "os_minor", "os_major", "patch", "minor", "build" ]
    }

    if "_grokparsefailure" not in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
    }

}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
	}

    kafka {
      id => "baskerville_client"
      topic_id => "deflect.logs"
      acks => "0"
      codec => "json"
      message_key => "%{host}"
      batch_size => 500000
      bootstrap_servers => "kafka:9092"
    }
}
